format long;
A = table2array(readtable("Attenueringsdata.xlsx"));  %Läser in tabelldata
A(:,1) = A(:,1)*1000;
energivarden_attenuering = A(:,1);
kidney_varden = A(:,10); % Attenuering i kidney
opts = detectImportOptions("SOFT_TISSUE_TVARSNITT.xlsx");
opts.PreserveVariableNames = true;
T =table2array(readtable("SOFT_TISSUE_TVARSNITT.xlsx",opts));
energivarden_tvarsnitt = T(:,1); 
rayleigh_varden = T(:,2); %Värden på de olika tvärsnitten
compton_varden = T(:,3);
fotoel_varden = T(:,4);
fotoner = 10;  % Antal fotoner

E_threshold = 50; % Tröskelvärde för En på 50 eV.

for i = 1:1000

    theta_old = acos(2*rand-1); % Polar vinkel

    fi_old = rand*2*pi; % Azimuthal vinkel

 

    % Bestäm steglängd

    s = -log(rand())/attenuering_kidney; % Steglängd

 

    % Första riktningen

    u_0 = sin(theta_old)*cos(fi_old);

    v_0 = sin(theta_old)*sin(fi_old);

    w_0 = cos(theta_old);

 

    % Första positionen 

    x_0 = s*u_0;

    y_0 = s*v_0;

    z_0 = s*w_0;


    while E > E_threshold % Fotonen försvinner när den har mindre energi än tröskelenergin
        % Bestäm fotoninteraktion. 
        [tvarsnitt_Compton, tvarsnitt_Rayleigh, tvarsnitt_fotoel] = tvarsnitt(E, T, energivarden_tvarsnitt, rayleigh_varden, compton_varden, fotoel_varden); summa = tvarsnitt_Compton + tvarsnitt_Rayleigh + tvarsnitt_fotoel;
        R = rand();
        
        if R <= tvarsnitt_fotoel/summa % Fotoelektrisk effekt
            E = 0;
        elseif R <= (tvarsnitt_fotoel + tvarsnitt_Compton)/summa % Comptonspridning
            [E, theta_new] = Compton(E);
        % Spridningsvinkel för compton bestäms med Khans metod  

        theta_new = ;

        fi_new = rand*2*pi;

        s = ; % Steg längd

       

        % Ekvation 7.13 från Bielajew.

        u_1 = u_0*cos(theta_new)+sin(theta_new)*(w_0*cos(fi_new)*cos(fi_old)-sin(fi_new*sin(fi_old));
        v_1 = v_0*cos(theta_new)+sin(theta_new)*(w_0*cos(fi_new)*sin(fi_old)+sin(fi_new)cos(fi_old));
        w_1 = w_0*cos(theta_new)-sin(theta_new)sin(theta_old)cos(fi_new)

       

        % Nästa position

        x_1 = x_0 + s*u_1;

        y_1 = y_0 + s*v_1;

        z_1 = z_0 + s*w_1;

 

        % Skriv över gammal vinkel och riktningar

        u_0 = u_1;

        v_0 = v_1;

        w_0 = w_1;

 

        x_0 = x_1;

        y_0 = y_1;

        z_0 = z_1;

 

        theta_old = theta_new;

        fi_old = fi_new;

 

        % Subtrahera deponerad energi

        E = E-Edeposited;

    end

end

% Funktioner:

%Funktion som interpolerar fram attenuering i njuren
function [attenuering_kidney] = attenuering(E, AA, energivarden_attenuering, kidney_varden)
     % Hittar index på de närmsta energierna
    [~, index1] = min(abs(AA(:,1) - E));
    index2 = index1 + 1;
        % Linjärinterpolation
    x1 = energivarden_attenuering(index1);
    x2 = energivarden_attenuering(index2);
    k1 = kidney_varden(index1);  %Värdena på Kidney
    k2 = kidney_varden(index2);
    attenuering_kidney = k1 + (E - x1) * (k2 - k1) / (x2 - x1);
end

function [E] = bestamma_E()
energibestamning = rand();
if 0 < energibestamning & energibestamning < 0.00854;
    E = 71600;  %Olika sannolikheter för olika energier enl. sönderfallsdata
elseif 0.00854 < energibestamning & energibestamning < 0.36354;
    E = 113000;
elseif 0.36354 < energibestamning & energibestamning < 0.3662;
    E = 137000;
elseif 0.3662 < energibestamning & energibestamning < 0.9762;
    E = 208000;
elseif 0.9762 < energibestamning & energibestamning < 0.995;
    E = 250000;
elseif 0.995 < energibestamning & energibestamning < 1;
    E = 321000;
end
end

%Funktion som linjärinterpolerar tvärsnitten
function [tvarsnitt_Rayleigh, tvarsnitt_Compton, tvarsnitt_fotoel] = tvarsnitt(E, T, energivarden_tvarsnitt, rayleigh_varden, compton_varden, fotoel_varden)
    % Hittar index på de närmsta energierna
    [~, index1] = min(abs(T(:,1) - E));
    index2 = index1 + 1;
    % Linjärinterpolation
    x1 = energivarden_tvarsnitt(index1);
    x2 = energivarden_tvarsnitt(index2);
    r1 = rayleigh_varden(index1);  %Värdena på Rayleigh
    r2 = rayleigh_varden(index2);
    c1 = compton_varden(index1); %Värden på Compton
    c2 = compton_varden(index2);
    f1 = fotoel_varden(index1); %Värden på fotoelektrisk effekt
    f2 = fotoel_varden(index2);
    
    tvarsnitt_Rayleigh = r1 + (E - x1) * (r2 - r1) / (x2 - x1);
    tvarsnitt_Compton = c1 + (E - x1) * (c2 - c1) / (x2 - x1);
    tvarsnitt_fotoel = f1 + (E - x1) * (f2 - f1) / (x2 - x1);
end

%Funktion för spridningsvinkeln vid compton som bestäms med Khans metod
function [theta_new,E] = Compton(E)
    alpha = E/511; %alpha är En i elektronmassor
    %Lista från Kahn
    b = 1;
    while b == 1 %Gör om dessa tills något krav är uppfyllt
        R1 = rand();
        R2 = rand();
        R3 = rand();
        if R1 <= (2*alpha+1)/(2*alpha+9)
            eta = 2*alpha*R2;
            
            if R3 <= 4*(eta^(-1)-eta^(-2))
                theta_new = 1-2*R2;
                b = 0;
            end
        elseif R1 > (2*alpha+1)/(2*alpha+9)
            eta = (2*alpha+1)/(2*R2*alpha+1);
            theta_new = 1-(eta-1)/alpha;
            
            if R3 <= 0.5*(theta_new^2+eta^(-1))
                b = 0;
            end
        end
        
    end
    E = E/eta;
end
