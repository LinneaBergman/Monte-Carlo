format long;
A = table2array(readtable("Attenueringsdata.xlsx"));
T = table2array(readtable("SOFT_TISSUE_TVÄRSNITT.xlsx"));
% Detect import options to automatically determine data types
opts = detectImportOptions("Tvärsnitt_soft_tissue.xlsx");
    
% Read the table using the detected import options
%T = readtable("Tvärsnitt_soft_tissue.xlsx", opts);
%idx=find(unique(T(:,1)));
%T=T(idx,:);
fotoner = 10;  % Antal fotoner
b = 1;
% Koordinat-vektorer
x = zeros(fotoner);  % X-koordinat
y = zeros(fotoner);  % Y-koordinat
z = zeros(fotoner);  % Z-koordinat

% Simulerings-loop för varje foton
for foton = 1:fotoner
    energibestamning = rand(); %Slumpar ett tal som bestämmer vilken energi fotonen får
    if 0 < energibestamning & energibestamning < 0.00854;
        fotonenergi = 71600;  %Olika sannolikheter för olika fotonenergier enl. sönderfallsdata
    elseif 0.00854 < energibestamning & energibestamning < 0.36354;
        fotonenergi = 113000;
    elseif 0.36354 < energibestamning & energibestamning < 0.3662;
        fotonenergi = 137000;
    elseif 0.3662 < energibestamning & energibestamning < 0.9762;
        fotonenergi = 208000;
    elseif 0.9762 < energibestamning & energibestamning < 0.995;
        fotonenergi = 250000;
    elseif 0.995 < energibestamning & energibestamning < 1;
        fotonenergi = 321000;
    end
    
    
    steg = 1; %Visar vilket steg den är på
    % Alla fotoner börjar i origo
    x(foton, 1) = 0;
    y(foton, 1) = 0;
    z(foton, 1) = 0;
    
    %Måste göra så att fotonerna tar ett slumpmässigt steg i början.
    % Skapar slumpmässig riktning
    theta = 2 * pi * rand();  % Slumpmässig vinkel mellan 0 och 2pi
    phi = pi * rand();  % Slumpmässig vinkel mellan 0 och pi
    steglangd = -log(rand())/0.1707;  % Steglängd. Använder massattenueringskoefficienten för vatten
    % Fotonen flyttas
    x(foton, steg+1) = x(foton, steg) + steglangd * sin(phi) * cos(theta);
    y(foton, steg+1) = y(foton, steg) + steglangd * sin(phi) * sin(theta);
    z(foton, steg+1) = z(foton, steg) + steglangd * cos(phi);
    
    steg = steg + 1;
    
    %Använder tabellen Attenueringsdata och Tvärsnitt för att välja vilke vxv som ska ske
    T;
    energivarden_tvarsnitt = T(:,1);
    rayleigh_varden = T(:,2);
    compton_varden = T(:,3);
    fotoel_varden = T(:,4);
    % Hittar index på de närmsta energierna
    [~, index1] = min(abs(T(:,1) - fotonenergi));
    index2 = index1 + 1;
    % Linjärinterpolation
    x1 = energivarden_tvarsnitt(index1);
    x2 = energivarden_tvarsnitt(index2);
    r1 = rayleigh_varden(index1);  %Värdena på Rayleigh
    r2 = rayleigh_varden(index2);
    c1 = compton_varden(index1); %Värden på Compton
    c2 = compton_varden(index2);
    f1 = fotoel_varden(index1); %Värden på fotoelektrisk effekt
    f2 = fotoel_varden(index2);
    
    tvarsnitt_Rayleigh = r1 + (fotonenergi - x1) * (r2 - r1) / (x2 - x1);
    tvarsnitt_Compton = c1 + (fotonenergi - x1) * (c2 - c1) / (x2 - x1);
    tvarsnitt_fotoel = f1 + (fotonenergi - x1) * (f2 - f1) / (x2 - x1);
    
    while fotonenergi > 50 %Sätter gränsen på 50 eV. Alltså försvinner fotonen när den har mindre energi än så
        alpha = fotonenergi/511; %alpha är fotonenergin i elektronmassor
        steglangd = -log(rand())/0.1707;  % Steglängd. Använder massattenueringskoefficienten för vatten
        %Lista från Kahn
        b = 1;
        while b == 1 %Gör om dessa tills något krav är uppfyllt
            R1 = rand();
            R2 = rand();
            R3 = rand();
            if R1 <= (2*alpha+1)/(2*alpha+9)
                eta = 2*alpha*R2;
                
                if R3 <= 4*(eta^(-1)-eta^(-2))
                    costheta = 1-2*R2;
                    b = 0;
                end
            elseif R1 > (2*alpha+1)/(2*alpha+9)
                eta = (2*alpha+1)/(2*R2*alpha+1);
                costheta = 1-(eta-1)/alpha;
                
                if R3 <= 0.5*(costheta^2+eta^(-1))
                    b = 0;
                end
            end
            
        end
        
        
        % Call the function to generate random direction
        [theta, phi, thetaa] = generateRandomDirection(costheta);
        
        % Fotonen flyttas
        x(foton, steg+1) = x(foton, steg) + steglangd * sin(phi) * costheta;
        y(foton, steg+1) = y(foton, steg) + steglangd * sin(phi) * sin(theta);
        z(foton, steg+1) = z(foton, steg) + steglangd * cos(phi);
        
        %deltaW = (0.1/0.1707)*fotonenergi;%Energin som fotonen minskar med vid varje steg
        %fotonenergi = fotonenergi-deltaW; %Fotonens nya energi
        fotonenergi = fotonenergi/eta;
        steg = steg+1;
        
        %fotonenergi = 1;
    end
end

% Plotta fotonernas rörelse i 3D
figure;
for foton = 1:fotoner
    plot3(x(foton, 1:steg), y(foton, 1:steg), z(foton, 1:steg), 'b.-');
    hold on;
end

% Lägger en röd prick i origo
scatter3(0, 0, 0, 25, 'r', 'filled'); % storlek = 25

hold off;


axis equal;
title('Punktkälla med fotoner (3D)');
xlabel('X-koordinat');
ylabel('Y-koordinat');
zlabel('Z-koordinat');

function [theta, phi, thetaa] = generateRandomDirection(costheta)
% Generate random angles
theta = 2 * pi * rand();  % Random angle between 0 and 2pi
phi = pi * rand();        % Random angle between 0 and pi

% Calculate thetaa using costheta
thetaa = 2*acos(costheta);
end


